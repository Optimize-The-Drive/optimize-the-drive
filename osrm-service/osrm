#!/bin/bash

DATA_PATH=$(dirname $(realpath -s $0))/data

container_exists() {
    if [ "$(docker ps -a | grep $1)" ]; then
        return 0
    else
        return 1
    fi
}

process_data() {
    echo "Purging ${DATA_PATH}"
    rm -rf "$DATA_PATH"

    docker stop osrm-extract osrm-partition osrm-customize osrm-server &> /dev/null || true
    docker rm osrm-extract osrm-partition osrm-customize osrm-server &> /dev/null || true

    # re-generate input data for the service
    wget -P $DATA_PATH http://download.geofabrik.de/north-america/us/ohio-latest.osm.pbf
    docker run --name osrm-extract -t -v "${DATA_PATH}:/data" ghcr.io/project-osrm/osrm-backend osrm-extract -p /opt/car.lua /data/ohio-latest.osm.pbf
    docker run --name osrm-partition -t -v "${DATA_PATH}:/data" ghcr.io/project-osrm/osrm-backend osrm-partition /data/ohio-latest.osrm
    docker run --name osrm-customize -t -v "${DATA_PATH}:/data" ghcr.io/project-osrm/osrm-backend osrm-customize /data/ohio-latest.osrm 
}

run_service() {
    echo Starting service...

    if ! [ -d  "${DATA_PATH}" ]; then
        echo "DATA directory doesn't exist. Exiting..."
        exit 1
    fi

    if ! container_exists osrm-server; then
        docker run --name osrm-server -t -i -p 5000:5000 -v "${DATA_PATH}:/data" ghcr.io/project-osrm/osrm-backend osrm-routed --algorithm mld /data/ohio-latest.osrm
    else
        docker start osrm-server &> /dev/null || echo "Unable to start the OSRM service"
    fi
}

stop_service() {
    echo Stopping service...
    docker stop osrm-server &> /dev/null || true
}

attach_service() {
    echo Attaching to service...
    docker attach osrm-server 2> /dev/null || echo "Unable to attach to the OSRM service. Ensure the service is running."
    exit 1
}

get_status() {
    status=$(docker container inspect -f '{{.State.Status}}' osrm-server 2>/dev/null || echo Error retreving status. Make sure the service has been created.)
    echo "OSRM Service: ${status^^}"
}

help()
{
   # Display Help
   echo "Runs OSRM service related functions."
   echo
   echo "Syntax: osrm [OPTION]..."
   echo "OPTIONS:"
   echo "-g, --generate   Generate the OSRM map data."
   echo "-s, --start      Start the OSRM service."
   echo "-e, --stop       Exit the OSRM service."
   echo "-a, --attach     Attach to the service output."
   echo "-i, --status     Get status of the service."
   echo "-h, --help       Print this help."
}

options=$(getopt -o hgseai -l help,generate,start,stop,attach,status -n "$0" -- "$@") || exit
eval set -- "$options"

# Parse short options
# while getopts "hgsea" option; do
while [[ $1 != -- ]]; do
   case $1 in
        -h|--help) # display Help
            help
            shift 1
            ;;
        -g|--generate) # generate data
            process_data
            shift 1
            ;;
        -s|--start) # Run service
            run_service
            shift 1
            ;;
        -e|--stop) # Stop service
            stop_service
            shift 1
            ;;
        -a|--attach) # Attach to process
            attach_service
            shift 1
            ;;
        -i|--status) # Get service status
            get_status
            shift 1
        ;;
        *) echo "bad option: $1" >&2; exit 1;;
   esac
done